<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_in_stream" xml:lang="en-US">
<title>InStream Struct Reference</title>
<indexterm><primary>InStream</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_struct_in_stream_1a6f82f3399cf052c8b55d500feec79bd2"/><emphasis role="strong">InStream</emphasis> (const <link linkend="_struct_in_stream">InStream</link> &amp;baseStream, std::string content)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a249983cd8365347d249485c7840e3424"/>void <emphasis role="strong">init</emphasis> (std::string fileName, TMode mode)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a4b78654581508e7ace12cdda20de48df"/>void <emphasis role="strong">init</emphasis> (std::FILE *f, TMode mode)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a7e9ee69fe14cc6c19b059b384eebed5c"/>void <emphasis role="strong">setTestCase</emphasis> (int testCase)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ab88e3e00ca1111534d3d110166f275bd"/>std::vector&lt; int &gt; <emphasis role="strong">getReadChars</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a3caea7dc5003207a13b690e1e6523759"/>void <emphasis role="strong">skipBlanks</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1af208d97fa6484d10b88d611012fce578"/>char <emphasis role="strong">curChar</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a15dbd488971ba0da79085f7bd980f1f1"/>void <emphasis role="strong">skipChar</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1af46102c51b215e59e3b9e993ac999fe5"/>char <emphasis role="strong">nextChar</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aa7711bdcca7b52181fd0f3072d935205"/>char <emphasis role="strong">readChar</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0c49c9fe193752b77e17fc7e45b0965b"/>char <emphasis role="strong">readChar</emphasis> (char c)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a012e968b18b359b82897db805faeb0f6"/>char <emphasis role="strong">readSpace</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a8c656e9ae7175e852033fbdffe41550b"/>void <emphasis role="strong">unreadChar</emphasis> (char c)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0daf92605da53c68648ad78572965ca3"/>void <emphasis role="strong">reset</emphasis> (std::FILE *file=NULL)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a8c1f774508b47b9e80c76d37d268f6f4"/>bool <emphasis role="strong">eof</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a2c7c8561462345e6ee18a0d8ea4bc00b"/>bool <emphasis role="strong">seekEof</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ac54c356a099d9af022d59cdcd1b75bcd"/>bool <emphasis role="strong">eoln</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a106d09bbdd844ca246bfbf2c6409f4b6"/>bool <emphasis role="strong">seekEoln</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a86e63a6bb9bc47cae9f58f0591ecc53f"/>void <emphasis role="strong">nextLine</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a2d0d971de1cd2d7da01f7d6bb4f836a3"/>std::string <emphasis role="strong">readWord</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aab5bf73477536435d39efd209bf672d0"/>std::string <emphasis role="strong">readToken</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a33a01a1ab403b91c58d630b2650f999e"/>std::string <emphasis role="strong">readWord</emphasis> (const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a7848236cb25239dc96ac1d01953116c9"/>std::string <emphasis role="strong">readWord</emphasis> (const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a05e78a1ad94e4ed2078daee8eeb7e2cf"/>std::vector&lt; std::string &gt; <emphasis role="strong">readWords</emphasis> (int size, const std::string &amp;ptrn, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0382d1f95cecf40e7c728c033c14123b"/>std::vector&lt; std::string &gt; <emphasis role="strong">readWords</emphasis> (int size, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aaa61148d12958728cd443f21b2ed0aa3"/>std::vector&lt; std::string &gt; <emphasis role="strong">readWords</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a1551acb574a25586a2ba2ad594398e8c"/>std::string <emphasis role="strong">readToken</emphasis> (const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aa7e276efc82ccd5bcefbfaf8f0391677"/>std::string <emphasis role="strong">readToken</emphasis> (const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0c556560eb05d89757fc854d38ae650b"/>std::vector&lt; std::string &gt; <emphasis role="strong">readTokens</emphasis> (int size, const std::string &amp;ptrn, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a5f2d2a617eed60c5a05872af6ece6855"/>std::vector&lt; std::string &gt; <emphasis role="strong">readTokens</emphasis> (int size, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a7b79dfec1ae85f251876f603751036d9"/>std::vector&lt; std::string &gt; <emphasis role="strong">readTokens</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ace052a2f951135d3a7699c3824fbc4f7"/>void <emphasis role="strong">readWordTo</emphasis> (std::string &amp;result)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aae65d2db41677626fd5ffa446be65003"/>void <emphasis role="strong">readWordTo</emphasis> (std::string &amp;result, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a78c7969db04a87aea6263c8563dc5c93"/>void <emphasis role="strong">readWordTo</emphasis> (std::string &amp;result, const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0512828fe7bc56a8fa2ddb4e0e6f2b72"/>void <emphasis role="strong">readTokenTo</emphasis> (std::string &amp;result)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a6cc04d722a5e707b0450396c671c8732"/>void <emphasis role="strong">readTokenTo</emphasis> (std::string &amp;result, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ac191b4317fc175b291cae1fa4fc7b399"/>void <emphasis role="strong">readTokenTo</emphasis> (std::string &amp;result, const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1af964fda2b145a8c8d25965b7ef4784cd"/>long long <emphasis role="strong">readLong</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a473c29087621184bb71998a12957e822"/>unsigned long long <emphasis role="strong">readUnsignedLong</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a68a75c1f359c0b3917a3922f4512da08"/>int <emphasis role="strong">readInteger</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ab9c40b84ce444e0eabbec47c881b4c38"/>int <emphasis role="strong">readInt</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a1398548ec0f156ddc9add251addb63c4"/>long long <emphasis role="strong">readLong</emphasis> (long long minv, long long maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a469d95f96c09746781621480b74c5c83"/>std::vector&lt; long long &gt; <emphasis role="strong">readLongs</emphasis> (int size, long long minv, long long maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ab135bb75d235e57fea89a248acd51015"/>std::vector&lt; long long &gt; <emphasis role="strong">readLongs</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ac168f51d536fd2fef12d6aa87ff5795f"/>unsigned long long <emphasis role="strong">readUnsignedLong</emphasis> (unsigned long long minv, unsigned long long maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a8c85a1d577aeb727bec09f362e3a395a"/>std::vector&lt; unsigned long long &gt; <emphasis role="strong">readUnsignedLongs</emphasis> (int size, unsigned long long minv, unsigned long long maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a5d3141608fafc3797171a3ea7627ec4d"/>std::vector&lt; unsigned long long &gt; <emphasis role="strong">readUnsignedLongs</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aac4b9f822f2471eb19f89e3c0d78169b"/>unsigned long long <emphasis role="strong">readLong</emphasis> (unsigned long long minv, unsigned long long maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a9bd7a7d10db6d24401dfd3b421ed6045"/>std::vector&lt; unsigned long long &gt; <emphasis role="strong">readLongs</emphasis> (int size, unsigned long long minv, unsigned long long maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a789739800a5332fb69578d60fef57947"/>int <emphasis role="strong">readInteger</emphasis> (int minv, int maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0811e321fbb08005ef2dec953d6f3256"/>int <emphasis role="strong">readInt</emphasis> (int minv, int maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1adb2af0baf6e9e6efa47a084719f0b2ea"/>std::vector&lt; int &gt; <emphasis role="strong">readIntegers</emphasis> (int size, int minv, int maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ab76c62ce0113ca54feb21c1bd61611cf"/>std::vector&lt; int &gt; <emphasis role="strong">readIntegers</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1afe94166e208381f17f49906ee5d50ae1"/>std::vector&lt; int &gt; <emphasis role="strong">readInts</emphasis> (int size, int minv, int maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a9dc7971488f79c36b0c039faac9a91b1"/>std::vector&lt; int &gt; <emphasis role="strong">readInts</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a147bef1aea6670fb8e2e6be97e76edc2"/>double <emphasis role="strong">readReal</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a7409a09698273a264eaa9069ecf90abf"/>double <emphasis role="strong">readDouble</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1afefbbd644f24959a3c0dca545c50ca8d"/>double <emphasis role="strong">readReal</emphasis> (double minv, double maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a6d4100230dab7762fc8a67889f0af48b"/>std::vector&lt; double &gt; <emphasis role="strong">readReals</emphasis> (int size, double minv, double maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a30e0fec1354eccc823c46fb2decb6a5d"/>std::vector&lt; double &gt; <emphasis role="strong">readReals</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a477dc26871b7cbb20c2d3c5aa7f51a8f"/>double <emphasis role="strong">readDouble</emphasis> (double minv, double maxv, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aee88ed3c11ec6eb9d1d73053e6766e8e"/>std::vector&lt; double &gt; <emphasis role="strong">readDoubles</emphasis> (int size, double minv, double maxv, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a9be66f81b7039ccdc58bee885ee15278"/>std::vector&lt; double &gt; <emphasis role="strong">readDoubles</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1af4a862c387cf199c075896c046b3038b"/>double <emphasis role="strong">readStrictReal</emphasis> (double minv, double maxv, int minAfterPointDigitCount, int maxAfterPointDigitCount, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a05d7a1183338770dd288298e6f4378c7"/>std::vector&lt; double &gt; <emphasis role="strong">readStrictReals</emphasis> (int size, double minv, double maxv, int minAfterPointDigitCount, int maxAfterPointDigitCount, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aaecf640ad9de7cf1873b2bc216e32b47"/>double <emphasis role="strong">readStrictDouble</emphasis> (double minv, double maxv, int minAfterPointDigitCount, int maxAfterPointDigitCount, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1af2689fbf7c65b80728826fcb4230163f"/>std::vector&lt; double &gt; <emphasis role="strong">readStrictDoubles</emphasis> (int size, double minv, double maxv, int minAfterPointDigitCount, int maxAfterPointDigitCount, const std::string &amp;variablesName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a6e45ce9c44925056ec1db59400012c3d"/>std::string <emphasis role="strong">readString</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a2cba4bd119b24d1af9c70ce238b2fbd6"/>std::vector&lt; std::string &gt; <emphasis role="strong">readStrings</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a79fc60da4d122afd8c8f6f76c1b7fa56"/>void <emphasis role="strong">readStringTo</emphasis> (std::string &amp;result)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a25e0a8a1aef084955346a2b82cefa3b3"/>std::string <emphasis role="strong">readString</emphasis> (const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a5d4fd12c9b43f1357e56aed051524f7d"/>std::string <emphasis role="strong">readString</emphasis> (const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a7566b33af0c853ce8ddfcdd7ad0e9648"/>std::vector&lt; std::string &gt; <emphasis role="strong">readStrings</emphasis> (int size, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a826426f9c306ac53747a3141f819a1c7"/>std::vector&lt; std::string &gt; <emphasis role="strong">readStrings</emphasis> (int size, const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a6dd7e7971417eadfc7c89ed6063ee166"/>void <emphasis role="strong">readStringTo</emphasis> (std::string &amp;result, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a90443a86a3a04208af259dbca2061b3b"/>void <emphasis role="strong">readStringTo</emphasis> (std::string &amp;result, const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1abd0f6cb6707dc00014499a12db9e7683"/>std::string <emphasis role="strong">readLine</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a2815b773083f56cf836e3669cf467e1a"/>std::vector&lt; std::string &gt; <emphasis role="strong">readLines</emphasis> (int size, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a3827b74ce0965b2b080319e24fa7a447"/>void <emphasis role="strong">readLineTo</emphasis> (std::string &amp;result)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a6d9a21120d8b21cf31e9bad2a1e83e92"/>std::string <emphasis role="strong">readLine</emphasis> (const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a4fd055a2face33d5862f23ee9cb86cd5"/>std::string <emphasis role="strong">readLine</emphasis> (const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a1ce8d0614039ae608612cca5d4fc5f28"/>std::vector&lt; std::string &gt; <emphasis role="strong">readLines</emphasis> (int size, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a5f62d4bb591a6de0a04cc8cc8a876202"/>std::vector&lt; std::string &gt; <emphasis role="strong">readLines</emphasis> (int size, const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;, int indexBase=1)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a15203cdc5616988c0b76e8652ec05cb7"/>void <emphasis role="strong">readLineTo</emphasis> (std::string &amp;result, const <link linkend="_classpattern">pattern</link> &amp;p, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a727fea17af0013a7a6089734292abd24"/>void <emphasis role="strong">readLineTo</emphasis> (std::string &amp;result, const std::string &amp;ptrn, const std::string &amp;variableName=&quot;&quot;)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a034c0ee97269f7bbd1e73ccc85b13f54"/>void <emphasis role="strong">readEoln</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a80e53f1d7a022f34f8d88839de43d6b5"/>void <emphasis role="strong">readEof</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a95bee5abfce70b5e663359558080ada9"/>NORETURN void <emphasis role="strong">quit</emphasis> (TResult result, const char *msg)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a3238a2d2a6fdb963d8f7c57416b5c1e5"/>NORETURN void <emphasis role="strong">quitf</emphasis> (TResult result, const char *msg,...)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0c969f83376d50af370615d44186647d"/>void <emphasis role="strong">quitif</emphasis> (bool condition, TResult result, const char *msg,...)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a65a8b22fb500b96357ad5630535ebb95"/>NORETURN void <emphasis role="strong">quits</emphasis> (TResult result, std::string msg)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a44a5027f6d7000c62ef27c6719f225ef"/>void <emphasis role="strong">ensuref</emphasis> (bool cond, const char *format,...)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ad961f49275f9e4d97b3ab6691f4b3d07"/>void <emphasis role="strong">__testlib_ensure</emphasis> (bool cond, std::string message)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a4e6d2f97680cbc53de0d6cb1a893016f"/>void <emphasis role="strong">close</emphasis> ()</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a7920954e072895d70f2127ccc7af789d"/>void <emphasis role="strong">xmlSafeWrite</emphasis> (std::FILE *file, const char *msg)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a1ee5c101df11ec9fe00867379bf3937f"/>void <emphasis role="strong">skipBom</emphasis> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_struct_in_stream_1a4ff4b2110a80dea66154702116080e49"/>static void <emphasis role="strong">textColor</emphasis> (WORD color)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a681c59fb45459a1247d0bb237eb196eb"/>static void <emphasis role="strong">quitscr</emphasis> (WORD color, const char *msg)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ac1ca7d4baa1a28a7de0995a2581841b5"/>static void <emphasis role="strong">quitscrS</emphasis> (WORD color, std::string msg)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_struct_in_stream_1ab970f7b2a0f0a699c6f3187f5b565c35"/><link linkend="_class_input_stream_reader">InputStreamReader</link> * <emphasis role="strong">reader</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a2e44f54a6f11bf8337e742ec131ac0b5"/>int <emphasis role="strong">lastLine</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a0e45bfde029064fc64c36c1462e6ba8b"/>std::string <emphasis role="strong">name</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a22c9fbb12ed6da923353c3a477881686"/>TMode <emphasis role="strong">mode</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1ac1db0153031be42e22117179c7cc70bf"/>bool <emphasis role="strong">opened</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a66d3e4b4c823f79d1f53ad5901733717"/>bool <emphasis role="strong">stdfile</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a8aec5ed448357d952d4fae14e4054d8c"/>bool <emphasis role="strong">strict</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a8afeeed49266480bd239d832415fb85b"/>int <emphasis role="strong">wordReserveSize</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1af2f09659cea3fd78f1e662cd918d2c30"/>std::string <emphasis role="strong">_tmpReadToken</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a47cff32cdacd0978f83382c6c81d7df4"/>int <emphasis role="strong">readManyIteration</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a14e6d7455706cea771265a7ab8407918"/>size_t <emphasis role="strong">maxFileSize</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a4a4e8df78395f7be17d9429e7640eb26"/>size_t <emphasis role="strong">maxTokenLength</emphasis></para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a8ff983747e2b08a2f8f01d226b23f20a"/>size_t <emphasis role="strong">maxMessageLength</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_struct_in_stream_1af18bd290c3c3907be197c1878946c4d8"/>static const int <emphasis role="strong">NO_INDEX</emphasis> = INT_MAX</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a582ee4c10e2543041466180e6134865a"/>static const char <emphasis role="strong">OPEN_BRACKET</emphasis> = char(11)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a3b35e480ab8ea91b44cd8be3bf550fa8"/>static const char <emphasis role="strong">CLOSE_BRACKET</emphasis> = char(17)</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a2eb9f95d5c8ef82ec45295113294b836"/>static const WORD <emphasis role="strong">LightGray</emphasis> = 0x07</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1aa2b66ca7098a63f267cdc650eda5b11c"/>static const WORD <emphasis role="strong">LightRed</emphasis> = 0x0c</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a1906bb56c67bc1c4268903f37e2604a4"/>static const WORD <emphasis role="strong">LightCyan</emphasis> = 0x0b</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a088a42a5a342bf630b6288c308d276e3"/>static const WORD <emphasis role="strong">LightGreen</emphasis> = 0x0a</para>
</listitem>
            <listitem><para><anchor xml:id="_struct_in_stream_1a9dcd83240a933dee55e8195f6228ccad"/>static const WORD <emphasis role="strong">LightYellow</emphasis> = 0x0e</para>
</listitem>
        </itemizedlist>
</simplesect>
<para>
The documentation for this struct was generated from the following file:</para>
testlib.h</section>
